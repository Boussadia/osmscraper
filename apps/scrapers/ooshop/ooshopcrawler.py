#!/usr/bin/python
# -*- coding: utf-8 -*-

import mechanize
from urllib import urlencode

from apps.scrapers.base.basecrawler import BaseCrawler, Singleton

class OoshopCrawler(BaseCrawler, Singleton):

	def __init__(self):
		super(OoshopCrawler, self).__init__()
		user_agent = 'Mozilla/5.0 (Windows NT 6.1; Intel Mac OS X 10.6; rv:7.0.1) Gecko/20100101 Firefox/7.0.1'
		self.browser.addheaders = [('User-agent', user_agent)]	

	def pagination(self, url, pagination, key, options = None):
		"""
			This method is the equivalent of clicking on a number of the pagination in order to get an other page of a category page.

			Input :
				- pagination (hash) : page information to fetch
			Output:
				- code : page retrieved from wed?
				- html : fetched html
		"""
		return self.__do_PostBack(url, pagination['eventTarget'], pagination['eventArgument'], key, options)

	def category_pagination(self, url, pagination):
		"""
			This method is the equivalent of clicking on a number of the pagination in order to get an other page of a category page.

			Input :
				- pagination (hash) : page information to fetch
			Output:
				- code : page retrieved from wed?
				- html : fetched html
		"""
		return self.pagination(url, pagination,'ctl00$cphC$pn3T1$ctl01$upPaginationH')

	def cart_pagination(self, url, pagination, options):
		"""
			This method is the equivalent of clicking on a number of the pagination in order to get an other page of a category page.

			Input :
				- pagination (hash) : page information to fetch
			Output:
				- code : page retrieved from wed?
				- html : fetched html
		"""
		allowed_args = {
			'ctl00$sm':'ctl00$cphC$ucVp$upPaginationH|ctl00$cphC$ucVp$rptPaginationH$ctl01$lbPage',
			'__EVENTTARGET':'ctl00$cphC$ucVp$rptPaginationH$ctl01$lbPage',
			'__EVENTARGUMENT':'',
			'__LASTFOCUS':'',
			'__VIEWSTATE':'',
			'ctl00$xCoordHolder':0,
			'ctl00$yCoordHolder':480,
			'ctl00$headerCtrl$txtB':'',
			'ctl00$cphC$ucVp$txtCodeAdvantage':'',
			'ctl00$cphC$ucVp$ddlAddPanierToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl00$rptProduit$ctl00$HidIdfo':122209,
			'ctl00$cphC$ucVp$rptUnivers$ctl00$rptProduit$ctl00$HidQuantiteIni':4,
			'ctl00$cphC$ucVp$rptUnivers$ctl00$rptProduit$ctl00$Qta':4,
			'ctl00$cphC$ucVp$rptUnivers$ctl00$rptProduit$ctl00$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl00$HidIdfo':1535,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl00$HidQuantiteIni':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl00$Qta':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl00$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl01$HidIdfo':3751,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl01$HidQuantiteIni':3,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl01$Qta':3,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl01$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl02$HidIdfo':5428,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl02$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl02$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl02$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl03$HidIdfo':5430,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl03$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl03$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl03$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl04$HidIdfo':30506,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl04$HidQuantiteIni':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl04$Qta':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl04$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl05$HidIdfo':67723,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl05$HidQuantiteIni':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl05$Qta':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl05$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl06$HidIdfo':17279,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl06$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl06$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl06$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl07$HidIdfo':2242,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl07$HidQuantiteIni':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl07$Qta':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl07$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl08$HidIdfo':17475,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl08$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl08$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl08$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl09$HidIdfo':67556,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl09$HidQuantiteIni':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl09$Qta':2,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl09$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl10$HidIdfo':34022,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl10$HidQuantiteIni':4,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl10$Qta':4,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl10$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl11$HidIdfo':17068,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl11$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl11$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl11$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl12$HidIdfo':121441,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl12$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl12$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl12$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl13$HidIdfo':121440,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl13$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl13$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl13$ddlAddToList':-1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl14$HidIdfo':52140,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl14$HidQuantiteIni':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl14$Qta':1,
			'ctl00$cphC$ucVp$rptUnivers$ctl01$rptProduit$ctl14$ddlAddToList':-1,
			'ctl00$ucDetProd$AjoutPanier1$nbrProduit':1,
			'ctl00$Perso$panier$repPa$ctl00$fo':1535,
			'ctl00$Perso$panier$repPa$ctl00$qi':2,
			'ctl00$Perso$panier$repPa$ctl00$qdp':2,
			'ctl00$Perso$panier$repPa$ctl01$fo':127596,
			'ctl00$Perso$panier$repPa$ctl01$qi':1,
			'ctl00$Perso$panier$repPa$ctl01$qdp':1,
			'ctl00$Perso$panier$repPa$ctl02$fo':127595,
			'ctl00$Perso$panier$repPa$ctl02$qi':1,
			'ctl00$Perso$panier$repPa$ctl02$qdp':1,
			'ctl00$Perso$ucAu$login':'',
			'ctl00$Perso$ucAu$tbEmail':'',
		}

		availables_keys = allowed_args.keys()

		# Adding missing keys to options
		for key in availables_keys:
			if key not in options.keys(): options[key] = allowed_args[key]

		availables_keys = options.keys()
		# removing undesired keys from options
		for key in availables_keys:
			if key not in allowed_args.keys(): del options[key]


		if "__EVENTTARGET" in options: del options["__EVENTTARGET"]
		if "__EVENTARGUMENT" in options: del options["__EVENTARGUMENT"]
		if "__LASTFOCUS" in options: del options["__LASTFOCUS"]
		if "ctl00$sm" in options: del options["ctl00$sm"]

		return self.pagination(url, pagination, 'ctl00$cphC$ucVp$upPaginationH', options)



	def __do_PostBack(self, url, eventTarget, eventArgument, ctrl, options = None):
		"""
			Method specific to ooshop in order to retrieve pagination data.
		"""
		values = {}

		values["__EVENTTARGET"] = eventTarget
		values["__EVENTARGUMENT"] = eventArgument
		values["__LASTFOCUS"] = ""
		values["ctl00$sm"] = ctrl+'|'+eventTarget

		if options is not None:
			values.update(options)

		return self.post(url, values)

	def brand_filter(self, url, brand):
		"""
			This method is the equivalent of filtering products by brand name in a category page

			Input :
				- brand_value (string) : brand value in option tag
			Output:
				- code : page retrieved from wed?
				- html : fetched html
		"""
		return self.__do_PostBack(url, eventTarget = brand['eventTarget'], eventArgument = '', ctrl = 'ctl00$cphC$pn3T1$upPN3T1', options = {brand['eventTarget']:brand['value'], 'ctl00$cphC$pn3T1$ctl01$ddlTri':'Aucun', '__VIEWSTATE': brand['__VIEWSTATE']})

	def login_user(self, url, data):
		"""
			This method authenticates and logs in user into oohop website
		"""
		new_data = urlencode(data)
		request = mechanize.Request(url, new_data)
		request.add_header('Accept', '*/*')
		request.add_header('Accept-Encoding', 'gzip,deflate,sdch')
		request.add_header('X-MicrosoftAjax', 'Delta=true')
		request.add_header('Content-Type', 'application/x-www-form-urlencoded; charset=UTF-8')
		request.add_header('Accept-Language', 'en-US,en;q=0.8')
		request.add_header('Accept-Charset', 'ISO-8859-1,utf-8;q=0.7,*;q=0.3')
		request.add_header('Cache-Control', 'no-cache')
		request.add_header('Origin', 'http://www.ooshop.com')
		request.add_header('Referer', url)
		request.add_header('User-Agent', 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_8_3) AppleWebKit/537.31 (KHTML, like Gecko) Chrome/26.0.1410.65 Safari/537.31')

		return self.do_request(request = request)



